Minimum Requirements:
=====================
- 16 GB of RAM *8 will be allocated for Docker)
- 30 GB of storage

Install required Software:
==========================
* Docker for Windows / Linux
* GDAL for widnows: https://trac.osgeo.org/gdal/wiki/OSGeo4W ### For AWS: https://gist.github.com/mojodna/2f596ca2fca48f08438e
* Gzip
* Python3 

python3 -m pip install logger docker progressbar2 json requests zipfile tarfile re argparse csv math httplib2 oauth2client base64 mimetypes email apiclient boto3 gdal python3-devel
Start Docker Server with 2 covereges:
=====================================

1. Run Docker for Windows

2. Go to the folder where you have the Navitia docker git project: ...\navitia-docker-compose

3. run "Git Bash" and type: 
$ git pull

4. Once done Change directory to "\TransitAnalystIsrael\root\assets":
$ cd "C:\Dev\TransitAnalystIsrael\root\assets" 
and type:
$ docker-compose up

Don't close git bash!


5. Once you see all containers started, open Windows Power Shell (not cmd!) - the path is not improtant and type:
docker ps

a list of docker containers should appear, copy the name of the worker container from the NAMES column, e.g. "navitia-docker-compose_tyr_worker_1"

6. Type the following command in the power shell in order to conenct to the worker container:
docker exec -i -t navitia-docker-compose_tyr_worker_1 /bin/bash

7. Once in, type the following commands in order to have 2 coverages as a base setup:
cd /srv/ed/output
cp default.nav.lz4 secondary-cov.nav.lz4
exit()

8. Go back to Git Bash terminal with running log and press CTRL+C to stop the docker container.
If, you closed the bash terminal, re-open it and type:
$ docker stop $(docker ps -a -q)

9. Start docker with 2 covereges by opening a Git Bash terminal at "...\TransitAnalystIsrael\root\assets" and running:
$ docker-compose -f docker-compose.yml -f docker-israel-custom-instances.yml up

10. Wait 2-3 minutes and then browse to "http://localhost:9191/v1/coverage/default" and "http://localhost:9191/v1/coverage/secondary-cov".
    You should see "start_production_date:" field with an actual date (if you see "dead-socket" wait 1-2 min. more)
	
Dokcer Server is ready!

Make sure you have the following python3(!) modules installed:
==============================================================

AWS EC2 Ubuntu should have proper IAM role to access the transit-analyst-key-bucket ("Navitia_EC2_to_S3") through instance settingsinthe EC2 console
UBUNTU
=======
change the time of the server to ISR:
<<<<<<COMPLETE>>>>>
docker installation:
https://www.digitalocean.com/community/tutorials/how-to-install-and-use-docker-on-ubuntu-18-04 - complete both steps until and including:
su - ${USER} 

docker compose for linux: https://docs.docker.com/compose/install/ (go to linux tab)


#Install Gdal for gdal command line operations:
sudo apt-get install libgdal-dev
sudo apt install gdal-bin

#Update pythong and install gdal
sudo apt-get install python3.6-dev
sudo apt-add-repository ppa:ubuntugis/ubuntugis-unstable
sudo apt-get update
sudo apt install python3-pip
sudo apt-get install python3-gdal
pip3 install logger docker progressbar2  requests argparse httplib2 oauth2client boto3 apiclient

pip3 install zipfile
pip3 install logger 
pip3 install shapely
pip3 install geopy
pip3 install docker 
pip3 install progressbar2 
pip3 install requests 
pip3 install argparse 
pip3 install httplib2 
pip3 install oauth2client 
pip3 install boto3 
pip3 install google-api-python-client
pip3 install google-auth
pip3 install google-auth-httplib2



clone gits

Bring up the docker compose:
$sudo docker-compose up


