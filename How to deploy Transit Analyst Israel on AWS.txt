Steps to Deploy Israel transit Analyst Alpha Version on AWS
===========================================================
1. The 9 static-website are to be hosted using an AWS S3 account.
   The assests shuold be made public for other users to access.
2. Transit Map requires a server to run the docker containers that run Navitia server.



Trnaist Map Deployment - Steps:
1. Launch EC2 instance - Ubuntu Server 18.04 LTS):
=================================================
(We originally used this article as a basis for this setup: https://www.ybrikman.com/writing/2015/11/11/running-docker-aws-ground-up/)
a. Instance Type: Select t3.large instance with 2 vCPUs and 8GB RAM.
b. Instance Details: leaeve as is and click "next"
c. Add Storage: Enter 30GB
d. add Tags: leaeve as is and click "next"
e. Select a security group that has prots 9191 and 20 open. If doesn't exist, create a new one with the following rules:
     Type            Protocol  Port Range   Source    
i.   HTTP            TCP        80       0.0.0.0/0
ii.  HTTP            TCP        80       ::/0
iii. Custom TCP Rule TCP        9191     0.0.0.0/0
iv.  SSH             TCP        22       0.0.0.0/0

f. Launch - save the key in accessible location

2. Assign an Elastic IP (static IP)
===================================
Each time EC2 is re-started it is assigned with new Public IP. We will assign it a static IP called Elastic IP. As long as the instance is up and running, the use of the elastic IP isn't charged.

a. Access the Elastic IP page via the EC2 console (under NETWORK & SECURITY)
b. Click "Allocate New Address" -> VPC -> Confirm
c. Right-click on the new address -> Associate Address -> select the newly created instance -> allow re-association -> Click "Associate"

4. Assign IAM roles
===================
The EC2 will upload items to your S3 buckets, take keys from the S3 bucket and also modify the AWS Lambda function that triggers the monthly update.
In order to do that, we grant him permissions using proper IAM roles.
a. Access the IAM roles page 

####################################################
####################################################
####################################################
####################################################
####################################################
####################################################
####################################################
####################################################

3. Acces via Putty for terminal operations
==========================================
a. Get Putty for Windows from: https://www.chiark.greenend.org.uk/~sgtatham/putty/latest.html

b. Follow the steps here to generate a .ppk file that will allow you to connect to the EC2 instance using putty: https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/putty.html

c. The user should be in the host name filed, e.g. "ubuntu@18.185.174.211" where the IP is the public IP (elastic IP we assigned earlier) of the EC2 which can be obtained from the AWS EC2 console.

4. Install required Software:
=============================
a. Git and Python3.6 is already installed.
b. Install Docker for Ubuntu 18-04 (taken from: https://www.digitalocean.com/community/tutorials/how-to-install-and-use-docker-on-ubuntu-18-04):
$ sudo apt install apt-transport-https ca-certificates curl software-properties-common
$ curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
$ sudo add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu bionic stable"
$ sudo apt update
$ apt-cache policy docker-ce
$ sudo apt install docker-ce

To verify installation:
$ sudo systemctl status docker

Add priviliges for easy terminal work:
$ sudo usermod -aG docker ${USER}

c. Install docker-compose (taken from https://docs.docker.com/compose/install/ - linux tab):
$ sudo curl -L "https://github.com/docker/compose/releases/download/1.23.2/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
$ sudo chmod +x /usr/local/bin/docker-compose



d. Pull Navitia docker project (adjusted to our needs) from: https://github.com/shakedk/navitia-docker-compose
e. Install docker and docker-compose tools (or as detailed here: https://gist.github.com/benfogel/041e3c4b8b856cdcdfd8d9d5aa0a7f73):
	$ sudo amazon-linux-extras install docker
	$ sudo usermod -a -G docker ec2-user
	$ sudo curl -L https://github.com/docker/compose/releases/download/1.21.0/docker-compose-`uname -s`-`uname -m` | sudo tee /usr/local/bin/docker-compose > /dev/null
	$ sudo chmod +x /usr/local/bin/docker-compose
	$ sudo service docker start
	$ sudo chkconfig docker on
	
	Configure the dokcer logs for rotation so they don't blow up:
	$ cd /etc/docker
	$ sudo touch daemon.json
	$ sudo vim daemon.json
	Go into to edit mode by pressing I and add:
	{
		"log-driver": "json-file",
		"log-opts": {"max-size": "10m", "max-file": "3"}
	}
	Quit with w and q
	$sudo systemctl reload docker

f. Copy the OSM and GTFS files to the worker container so the graph will be genreated:	
	Open Bash terminal session where the .pem file is lcoated and use the following commands to copy the GTFS and OSM files to the EC2 instance
	scp -i <pem-key-file-name>.pem israel-and-palestine-latest.osm.pbf ec2-user@<public-dns-of-ec2-instance, e.g. ec2-52-28-9-228.eu-central-1.compute.amazonaws.com>:/<destiantion directory>
g. change dir to the git repo and run:
	$docker-compose up
After 40-60 minutes the graph will be generated and if you go to http://<elastic-ip>:9191/v1/coverage/default you should see info about Israel coverage
h. Delete the OSM and GTFS files from the Linux host (they are automatically delete from the docker containers, so no worries about that) to save space

2. Assign an Elastic IP to teh isntance:
========================================
EC2 Instances recieve a new IP after each re-start. This can be avioded by attaching a static IP to the instance, in AWS it's called "Elastic IP".
go to the elastic IP console, careate and attach it to the EC2 isnatnce as instructed by the online wiazrd: https://eu-central-1.console.aws.amazon.com/ec2/v2/home?region=eu-central-1#Addresses:sort=PublicIp

3. Configure AWS Gateway API service to serve Secure content
============================================================
Navitia server on the instance serves HTTP only content via port 9191. Brwosers such as Chrome block this kind of data so we need to use AWS for serving secure content.
a. Access the API Console: https://eu-central-1.console.aws.amazon.com/apigateway/
b. Create new API Get Request
	Integration Type: HTTP
	Endpoint URL: http://${stageVariables.NavitiaServerIP}:9191/v1/coverage/default 
	content Handling: Passthrough
c. Click on the Created Get Method and Create a new Resource so you can pass the parameters (https://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-set-up-simple-proxy.html):
	Check the "proxy resource" checkbox and the details will be filled automatically (Name: proxy ; Path: /{proxy+}
	Check the "Enable API Gateway CORS" checkbox so if the request comes from another domain (and it will) the server will allow it
	Go to the "Intergratio request" section of the proxy resouece and set the HTTP method to Any
d. Enable Gzip servering - this will compress all responses from AWS and save data trasnfer costs (browsers know to deal with this automatically):
	Go to settings -> check the "Content Encoding enabled" checkbox -> Enter 100000 Bytes for "Minimum body size required for compression"
e. Deploy the API
	Go to Stages -> create new Staging named "Navitia Time Map"
	Go to Stage Varaiables -> Create new varaible "NavitiaServerIP" with the elastic IP of the EC2 instance 
	Go back to "Resources" -> Actions -> Deploy API
	Click on "Get" -> Test the API to see you get a response from the docker using the elastic IP.
	You should get Response code 200 and details about the coverage, such as regions, links, etc.
	
4. Upload the Bundled JS and HTML file to S3
============================================
a. git clone the navitia-timemap project to your host (not EC2): https://github.com/shakedk/TransitAnalystIsrael/tree/master/navitia-timemap - follow the commands in the git repo for initial install
b. Opem timeMap.js and change the server_url to work with the elastic ip
c. run "npm run build" to generate the static files in the "build" folder
d. upload the entire contents of the build folder to S3 and server and make them public.
e. If you run access index.html via the S3 link, you should be able to see a heat map loaded.

	
	

	




Exploring the size of docker logs:
docker ps -qa | xargs docker inspect --format='{{.LogPath}}' | xargs sudo du -hl
